# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13x1We0UqfTtalfYfn5_ne7p15dIzBCNg
"""

"""
================================
Recognizing hand-written digits
================================

This example shows how scikit-learn can be used to recognize images of
hand-written digits, from 0-9.

"""

print ('''
Q1: Vary hyperparameters Gamma and C. 
train the svm model on each combination of hyperparams, measure the dev set performance. 
Find the best model based on dev set performance, report train, dev, and test set result with that model. 
All this should happen in just one script. This is what was covered in the class. 
Print 1) the table of results: columns = {train, dev, test accuracy}, rows = {each hyperparameter combination},
 2) best hyperparams, and train, dev, test accuracy with them. 
 
''')

# Author: Gael Varoquaux <gael dot varoquaux at normalesup dot org>
# License: BSD 3 clause
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
# Standard scientific Python imports
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
import sklearn
from skimage.transform import rescale, resize
from skimage import transform

# Import datasets, classifiers and performance metrics
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split

#hyperparameter tuning
Gamma_list=[0.01 ,0.001, 0.0001, 0.0005]
c_list=[.1 ,.5, .4, 10, 5, 1]

h_param_comb=[{'gamma':g,'C':c} for g in Gamma_list for c in c_list]

digits = datasets.load_digits()

import numpy as np 
def resize_a(image,n):
    image = resize(image, (image.shape[0] // n, image.shape[1] // n),anti_aliasing=True)
    return image

digits_4 = np.zeros((1797, 2, 2))  # image divide by 4
digits_2 = np.zeros((1797, 4, 4))  # image divide by 2
digits_5 = np.zeros((1797, 4, 4))  # image divide by 5

for i in range(0,1797):
    digits_4[i] = resize_a(digits.images[i],4)

for i in range(0,1797):
    digits_2[i] = resize_a(digits.images[i],2)

for i in range(0,1797):
    digits_5[i] = resize_a(digits.images[i],5)
    


n_samples = len(digits.images)
data = digits.images.reshape((n_samples, -1))
print('original resolution',digits.images[-1].shape)
train_frac=0.8
test_frac=0.1
dev_frac=0.1
#print(data.shape)
# Split data into 80% train,10% validate and 10% test subsets
dev_test_frac=1-train_frac

X_train, X_dev_test, y_train, y_dev_test = train_test_split(data ,digits.target, test_size=dev_test_frac, shuffle=True,random_state=42)
X_test, X_dev, y_test, y_dev = train_test_split(X_dev_test, y_dev_test, test_size=(dev_frac)/dev_test_frac, shuffle=True,random_state=42)

best_acc=-1
best_model=None
best_h_params=None 
print('Q1 - 1. the table of results: columns = {train, dev, test accuracy}, rows = {each hyperparameter combination} ')	

for com_hyper in h_param_comb:

	# Create a classifier: a support vector classifier
	clf = svm.SVC()

	#Setting hyperparameter
	hyper_params=com_hyper
	clf.set_params(**hyper_params)
	#print(com_hyper)

	# Learn the digits on the train subset
	clf.fit(X_train, y_train)

	# Predict the value of the digit on the test subset
	predicted_train = clf.predict(X_train)
	predicted_dev = clf.predict(X_dev)
	predicted_test = clf.predict(X_test)
	
	#print("shape : ",predicted_dev.shape)
	
	cur_acc_train=metrics.accuracy_score(y_pred=predicted_train,y_true=y_train)
	cur_acc_dev=metrics.accuracy_score(y_pred=predicted_dev,y_true=y_dev)
	cur_acc_test=metrics.accuracy_score(y_pred=predicted_test,y_true=y_test)



	if cur_acc_dev>best_acc:
	     best_acc=cur_acc_dev
	     best_model=clf
	     best_h_params=com_hyper
	     print("Few best accuracy with: "+str(com_hyper))
	     print("New best accuracy:"+ " train" + "  "+str(cur_acc_train)+ " "+ "dev" + " "+str(cur_acc_dev)+ " "+ "test" + " " +str(cur_acc_test))
	     
predicted = best_model.predict(X_test)




#plt.show()
print('Q1 - 2. best hyperparams, and train, dev, test accuracy with them.')
print("Best hyperparameters were: ")
print(com_hyper)
print("Accuracy : ")
print(best_acc)

print('Q2. Check what is the "image" size in the digits dataset. Print the image size. ')
print('Image size = ', digits.images[0].shape)



print('For each image resolution: do Q1 and report results. Upload one screenshot per resolution -- so, three screenshot total.')
def resize_a(image,n):
    image = resize(image, (image.shape[0] // n, image.shape[1] // n),anti_aliasing=True)
    return image

digits_4 = np.zeros((1797, 2, 2))  # image divide by 4
digits_2 = np.zeros((1797, 4, 4))  # image divide by 2
digits_5 = np.zeros((1797, 4, 4))  # image divide by 5

for i in range(0,1797):
    digits_4[i] = resize_a(digits.images[i],4)

for i in range(0,1797):
    digits_2[i] = resize_a(digits.images[i],2)

for i in range(0,1797):
    digits_5[i] = resize_a(digits.images[i],5)


n_samples = len(digits.images)
data = digits_2.reshape((n_samples, -1))
train_frac=0.8
test_frac=0.1
dev_frac=0.1
#print(data.shape)
# Split data into 80% train,10% validate and 10% test subsets
dev_test_frac=1-train_frac

X_train, X_dev_test, y_train, y_dev_test = train_test_split(data ,digits.target, test_size=dev_test_frac, shuffle=True,random_state=42)
X_test, X_dev, y_test, y_dev = train_test_split(X_dev_test, y_dev_test, test_size=(dev_frac)/dev_test_frac, shuffle=True,random_state=42)

best_acc=-1
best_model=None
best_h_params=None 
for com_hyper in h_param_comb:

    # Create a classifier: a support vector classifier
    clf = svm.SVC()

    #Setting hyperparameter
    hyper_params=com_hyper
    clf.set_params(**hyper_params)
    #print(com_hyper)

    # Learn the digits on the train subset
    clf.fit(X_train, y_train)

    # Predict the value of the digit on the test subset
    predicted_train = clf.predict(X_train)
    predicted_dev = clf.predict(X_dev)
    predicted_test = clf.predict(X_test)
    
    #print("shape : ",predicted_dev.shape)
    
    cur_acc_train=metrics.accuracy_score(y_pred=predicted_train,y_true=y_train)
    cur_acc_dev=metrics.accuracy_score(y_pred=predicted_dev,y_true=y_dev)
    cur_acc_test=metrics.accuracy_score(y_pred=predicted_test,y_true=y_test)
    
    
    if cur_acc_dev>best_acc:
         best_acc=cur_acc_dev
         best_model=clf
         best_h_params=com_hyper
         print("New best acc with: "+str(com_hyper))
         print("New best accuracy:"+ " train" + "  "+str(cur_acc_train)+ " "+ "dev" + " "+str(cur_acc_dev)+ " "+ "test" + " " +str(cur_acc_test))
         
predicted = best_model.predict(X_test)

print("Best for Image Data set 1: ")
print(com_hyper)
print("Accuracy : ")
print(best_acc)

n_samples = len(digits.images)
data = digits_4.reshape((n_samples, -1))
train_frac=0.8
test_frac=0.1
dev_frac=0.1
#print(data.shape)
# Split data into 80% train,10% validate and 10% test subsets
dev_test_frac=1-train_frac

X_train, X_dev_test, y_train, y_dev_test = train_test_split(data ,digits.target, test_size=dev_test_frac, shuffle=True,random_state=42)
X_test, X_dev, y_test, y_dev = train_test_split(X_dev_test, y_dev_test, test_size=(dev_frac)/dev_test_frac, shuffle=True,random_state=42)

best_acc=-1
best_model=None
best_h_params=None 
for com_hyper in h_param_comb:

    # Create a classifier: a support vector classifier
    clf = svm.SVC()

    #Setting hyperparameter
    hyper_params=com_hyper
    clf.set_params(**hyper_params)
    #print(com_hyper)

    # Learn the digits on the train subset
    clf.fit(X_train, y_train)

    # Predict the value of the digit on the test subset
    predicted_train = clf.predict(X_train)
    predicted_dev = clf.predict(X_dev)
    predicted_test = clf.predict(X_test)
    
    #print("shape : ",predicted_dev.shape)
    
    cur_acc_train=metrics.accuracy_score(y_pred=predicted_train,y_true=y_train)
    cur_acc_dev=metrics.accuracy_score(y_pred=predicted_dev,y_true=y_dev)
    cur_acc_test=metrics.accuracy_score(y_pred=predicted_test,y_true=y_test)
    
    
    if cur_acc_dev>best_acc:
         best_acc=cur_acc_dev
         best_model=clf
         best_h_params=com_hyper
         print("New best acc with: "+str(com_hyper))
         print("New best accuracy:"+ " train" + "  "+str(cur_acc_train)+ " "+ "dev" + " "+str(cur_acc_dev)+ " "+ "test" + " " +str(cur_acc_test))
         
predicted = best_model.predict(X_test)

print("Best for Image Data set 2: ")
print(com_hyper)
print("Accuracy: ")
print(best_acc)



n_samples = len(digits.images)
data = digits_5.reshape((n_samples, -1))
train_frac=0.8
test_frac=0.1
dev_frac=0.1
#print(data.shape)
# Split data into 80% train,10% validate and 10% test subsets
dev_test_frac=1-train_frac

X_train, X_dev_test, y_train, y_dev_test = train_test_split(data ,digits.target, test_size=dev_test_frac, shuffle=True,random_state=42)
X_test, X_dev, y_test, y_dev = train_test_split(X_dev_test, y_dev_test, test_size=(dev_frac)/dev_test_frac, shuffle=True,random_state=42)

best_acc=-1
best_model=None
best_h_params=None 
for com_hyper in h_param_comb:

    # Create a classifier: a support vector classifier
    clf = svm.SVC()

    #Setting hyperparameter
    hyper_params=com_hyper
    clf.set_params(**hyper_params)
    #print(com_hyper)

    # Learn the digits on the train subset
    clf.fit(X_train, y_train)

    # Predict the value of the digit on the test subset
    predicted_train = clf.predict(X_train)
    predicted_dev = clf.predict(X_dev)
    predicted_test = clf.predict(X_test)
    
    #print("shape : ",predicted_dev.shape)
    
    cur_acc_train=metrics.accuracy_score(y_pred=predicted_train,y_true=y_train)
    cur_acc_dev=metrics.accuracy_score(y_pred=predicted_dev,y_true=y_dev)
    cur_acc_test=metrics.accuracy_score(y_pred=predicted_test,y_true=y_test)
    
    
    if cur_acc_dev>best_acc:
         best_acc=cur_acc_dev
         best_model=clf
         best_h_params=com_hyper
         print("New best accuracy with: "+str(com_hyper))
         print("New best accuracy:"+ " train" + "  "+str(cur_acc_train)+ " "+ "dev" + " "+str(cur_acc_dev)+ " "+ "test" + " " +str(cur_acc_test))
         
predicted = best_model.predict(X_test)

print("Best for Image Data set 3: ")
print(com_hyper)
print("Accuracy : ")
print(best_acc)
